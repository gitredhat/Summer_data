一、什么是容器:
  容器技术虚拟化技术已经成为一种被大家广泛认可的容器技术服务器资源共享方式，容器技术的核心有以下几个内核技术组成:资源管理、进程隔离、
  由于是在物理机上实施隔离,启动一个容器,可以像启动一个进程一样快速
--------------------------------------------------------------------------------------------------------------------------
二、什么是Docker
  Docker是完整的一套容器管理系统，Docker提供了一组命令,让用户更加方便直接地使用容器技术,而不需要过多关心底层内核技术
--------------------------------------------------------------------------------------------------------------------------
三、Docker优点
  1、相比于传统的虚拟化技术,容器更加简洁高效
  2、容器使用的共享公共库和程序
--------------------------------------------------------------------------------------------------------------------------
四、Docker缺点
  1、容器的隔离性没有虚拟化强
  2、共用Linux内核,安全性有先天缺陷
  3、SELinux难以驾驭
--------------------------------------------------------------------------------------------------------------------------
五、什么是镜像
  1、在Docker中容器是基于镜像启动的
  2、镜像是启动容器的核心
  3、镜像采用分层设计
  4、使用快照的COW技术,确保底层数据不丢失
--------------------------------------------------------------------------------------------------------------------------
镜像命令：
– docker images --------------》//查看镜像列表
– docker history--------------》//查看镜像制作历叱
– docker inspect--------------》//查看镜像底层信息
– docker pull-----------------》//下载镜像
– docker push-----------------》//上传镜像
– docker rmi------------------》//删除本地镜像
– docker save-----------------》//镜像另存为tar包
– docker load-----------------》//使用tar包导入镜像
– docker search---------------》//搜索镜像
– docker tag------------------》//修改镜像名称和标签
– docker run------------------》//运行容器
– docker stop-----------------》//关闭容器
– docker start----------------》//启动容器
– docker restart--------------》//重启容器
– docker inspect--------------》//查看容器底层信息
– docker top------------------》//查看容器进程列表
– docker rm-------------------》//删除容器
---------------------------------------------------------------------------------------------------------------------------
Docker ps命令
– docker ps-------------------》查看正在运行的容器
– docker ps -a----------------》查看所有容器列表
– docker ps -aq---------------》仅显示容器id
– docker attach---------------》进入容器,exit会导致容器关闭
– docker exec-----------------》进入容器,退出时不会关闭容器
----------------------------------------------------------------------------------------------------------------------------
容器环境准备
1、需要64位操作系统 、      2、至少RHEL6.5以上的版本,强烈推荐RHEL7
3、关闭防火墙(不是必须)     4、软件包(1、docker-engine 、 2、docker-engine-selinux)
yum -y install docker-engine-1.12.1-1.el7.centos.x86_64.rpm
systemctl start docker   systemctl enable docker
docker version
----------------------------------------------------------------------------------------------------------------------------
案例1:
创一个容器启nginx服务并修改默认index.heml内容
1、docker run -p 80:80 --name nginx_web -it nginx /bin/bash
2、Docker ps  -----------------------------------------------》查看nginx
3、docker exec -it 18b93 /bin/bash --------------------------》进入容器内部里
4、cd /usr/share/nginx/html/
5、echo "hello"  > index.html
6、nginx & --------------------------------------------------》放进后台
7、Ctrl+p 、Ctrl+q ------------------------------------------》退出
8、curl http：//localhost
hello
----------------------------------------------------------------------------------------------------------------------------
解析说明：
Docker 执行 docker run 之后，先在当前操作系统的基础上，虚拟化了一个精简版的linux(仅仅包含系统运行的最精简功能)，然后加载我们的Nginx镜像。
当Nginx镜像加载到我们的虚拟Linux环境中时，相当于在系统里执行了一个脚本，而这个脚本就是Nginx。
由于默认的Nginx 是不作为守护进程运行的。所以当Docker内监听到80端口的请求后，完成之后，就退出了Nginx的进程。该容器内只有一个进程，并且是非
守护的，执行完请求进程就销毁了。那么这个容器也就没有存在的必要了，所以Docker 中这个服务也就停掉了。这也就是我们执行 docker top 看不到当前
运行的容器的原因。作为暂时解决Nginx 只执行一次就退出的问题，我们可以进入交互式终端，执行 nginx & 让nginx 作为守护进程后台运行。
-----------------------------------------------------------------------------------------------------------------------------
案例2：
创一个容器启httpd服务并修改默认index.heml内容
一、准备系统镜像文件(如： centos 、redhat)
二、创建容器
1、docker run -itd centos
2、进入容器内部
docker exec -it xxx  /bin/bash
3、配置yum源
rm -rf /etc/yum.repos.d/*.repo
vim /etc/yum.repos.d/rhel.repo
4、安装httpd服务
yum -y install httpd
yum -y install net-tools  --------------------------》安装常用命令
5、修改首页文件
echo “132” > /etc/www/html/index.html
6、启动服务
apachectl ------------------------------------------》启动httpd服务
netstat -nutlp | grep :80 --------------------------》查看httpd服务是否起来
7、退出容器
Ctre+p Cter+q
8、查看容器ip
docker inspect xxx
9、访问容器里httpd服务
curl http://容器ip
------------------------------------------------------------------------------------------------------------------------------
Dockerfile命令：
– FROM:------------------------------------------------------》基础镜像
– MAINTAINER:------------------------------------------------》镜像创建者信息
– EXPOSE:----------------------------------------------------》开放的端口
– ENV:-------------------------------------------------------》设置变量
– ADD:-------------------------------------------------------》复制文件到镜像
– RUN:-------------------------------------------------------》制作镜像时执行的命令,可以有多个
– WORKDIR:---------------------------------------------------》定义容器默认工作目录
– CMD:-------------------------------------------------------》容器启动时执行的命令,仅可以有一条CMD
------------------------------------------------------------------------------------------------------------------------------
自定义镜像环境准备(案例1)
一、首先要有一个系统镜像(如：centos 、redhat)
1、mkdir /summer
2、touch /summer/Dockerfile
3、vim /summer/Dockerfile
FROM centos:lstest
RUN rm -f /etc/yum.repos.d/*.repo
ADD local.repo /etc/yum.repos.d/local.repo
RUN yum install -y vim net-tools psmisc iproute && yum clean all
4、docker build -t myos:summer .
------------------------------------------------------------------------------------------------------------------------------
案例2
制作一个ssh镜像并启服务
1、mkdir /sshd
2、touch /sshd/Dockerfile
3、vim   /sshd/Dockerfile
FROM myos:summer
RUN yum -y instal openssh-server initscripts
RUN echo "aa" | passwd --stdin root
RUN sshd-keygen
ENV EnvironmentFile=/etc/sysconfig/sshd
EXPOSE 22
CMD ["/usr/sbin/ssh","-D"]
4、docker build -t myos:sshd .
------------------------------------------------------------------------------------------------------------------------------
案例3
制作一个容器sshd httpd双服务 ，可以通过ssh更改默认首页




-----------------------------------------------------------------------------------------------------------------------------
自定义镜像仓库
1、下载registry
docker pull registry
2、修改docker配置文件
vim /etc/docker/daemon.json
{
        "insecure-registries":["本机ip:5000"]
}
:wq
3、systemctl restart docker
4、docker run -itd -p 5000:5000 registry
5、定义标签
docker tag 上传的镜像(如:myos:latest) 192.168.1.12:5000/myos:latest
6、上传镜像
docker push 192.168.1.12:5000/myos:latest
7、测试上传是否成功
查看镜像名称
http://本机ip:5000/v2/_catalog
查看标签名称
http://本机ip:5000/v2/镜像名称(如:myos)/tags/list
-----------------------------------------------------------------------------------------------------------------------------
案例4：
1、安装一台NFS服务器，共享一个目录
2、docker1 mount nfs的共享目录，并且把这个目录映射进容器1（nginx）
3、docker2 mount nfs的共享目录，并且把这个目录映射进容器1（httpd）
实现nginx与httpd共享一个web主页










                                                                                                     2018-11-19 作者: Summer
